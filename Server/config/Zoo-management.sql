-- The database schema

CREATE TABLE MANAGERS (
	MANAGER_ID NUMBER(10, 0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	NAME VARCHAR2(255) NOT NULL,
	EMAIL VARCHAR2(255) NOT NULL
);

CREATE TABLE PROJECTS (
	PROJECTID NUMBER(10, 0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	PROJECTDETAIL VARCHAR2(255) NOT NULL,
	STARTDATE DATE NOT NULL,
	ESTENDDATE DATE NOT NULL,
	MANAGER_ID NUMBER(10) NOT NULL,
	CONSTRAINT PROJ_MAN FOREIGN KEY (MANAGER_ID) REFERENCES MANAGERS(MANAGER_ID)
);

CREATE TABLE EMPLOYEES (
	EMP_ID NUMBER(10, 0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	NAME VARCHAR2(255) NOT NULL,
	EMAIL VARCHAR2(255) NOT NULL,
	MANAGER_ID NUMBER(10) NOT NULL,
	PROJECTID NUMBER(10),
	CONSTRAINT EMP_FK1 FOREIGN KEY (MANAGER_ID) REFERENCES MANAGERS(MANAGER_ID),
	CONSTRAINT EMP_FK2 FOREIGN KEY (PROJECTID) REFERENCES PROJECTS(PROJECTID)
);

CREATE TABLE SPECIES (
	SPECIESID NUMBER(10, 0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	SNAME VARCHAR2(255) NOT NULL,
	SDES VARCHAR2(255) NOT NULL
);

CREATE TABLE RESERVES (
	RESERVEID NUMBER(10, 0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	RTITLE VARCHAR2(255) NOT NULL,
	SPECIESID NUMBER(10) NOT NULL,
	CONSTRAINT RES_SPE FOREIGN KEY (SPECIESID) REFERENCES SPECIES(SPECIESID)
);

CREATE TABLE TASKS (
	TASK_ID NUMBER(10, 0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	TASK_DESC VARCHAR2(255) NOT NULL,
	ASSIGNED_TIME DATE NOT NULL,
	RESERVEID NUMBER(10) NOT NULL,
	COMPLETED NUMBER(1) DEFAULT 0,
	CONSTRAINT TSK_FK FOREIGN KEY (RESERVEID) REFERENCES RESERVES(RESERVEID)
);

CREATE TABLE ASSIGNMENTS (
	EMP_ID NUMBER(10) NOT NULL,
	TASK_ID NUMBER(10) NOT NULL,
	URGENCY NUMBER(1) NOT NULL,
	CONSTRAINT ASS_COMP_KEY PRIMARY KEY (EMP_ID, TASK_ID),
	CONSTRAINT ASS_FK FOREIGN KEY (TASK_ID) REFERENCES TASKS(TASK_ID),
	CONSTRAINT ASS_FK2 FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEES(EMP_ID)
);

CREATE TABLE VISITORLOGGING (
	VISITOR_NO NUMBER(10, 0) GENERATED BY DEFAULT AS IDENTITY NOT NULL UNIQUE,
	ENTRY_TIME NUMBER(10) NOT NULL
);

CREATE TABLE COMPLAINTS (
	COMPLAINT_NUM NUMBER(10, 0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	COMPLAINT VARCHAR2(255) NOT NULL,
	MANAGER_ID NUMBER(10),
	EMP_ID NUMBER(10) NOT NULL,
	CONSTRAINT COM_EMP FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEES(EMP_ID)
);

CREATE TABLE LOGINDATABASE (
	DATA_ID NUMBER(10) NOT NULL,
	EMAIL VARCHAR2(255) NOT NULL,
	L_PASSWORD VARCHAR2(255) NOT NULL,
	STATUS CHAR(1) NOT NULL,
	CONSTRAINT LOG_IN PRIMARY KEY (EMAIL)
);

CREATE OR REPLACE TRIGGER LOGINDATAE AFTER
	INSERT ON EMPLOYEES FOR EACH ROW
BEGIN
	IF INSERTING THEN
		INSERT INTO LOGINDATABASE (
			DATA_ID,
			EMAIL,
			L_PASSWORD,
			STATUS
		) VALUES (
			:NEW.EMP_ID,
			:NEW.EMAIL,
			:NEW.NAME,
			'E'
		);
	END IF;
END;
/

CREATE OR REPLACE TRIGGER LOGINDATAM AFTER
	INSERT OR DELETE ON MANAGERS FOR EACH ROW
BEGIN
	IF INSERTING THEN
		INSERT INTO LOGINDATABASE (
			DATA_ID,
			EMAIL,
			L_PASSWORD,
			STATUS
		) VALUES (
			:NEW.MANAGER_ID,
			:NEW.EMAIL,
			:NEW.NAME,
			'M'
		);
	END IF;
END;
/

-- Adding data
-- Insert values into Manager table
INSERT INTO MANAGERS (
	NAME,
	EMAIL
) VALUES (
	'Alice Johnson',
	'alice.j@example.com'
);

INSERT INTO MANAGERS (
	NAME,
	EMAIL
) VALUES (
	'Bob Smith',
	'bob.s@example.com'
);

-- Insert values into Species table
INSERT INTO SPECIES (
	SNAME,
	SDES
) VALUES (
	'Elephant',
	'Large mammal with a trunk'
);

INSERT INTO SPECIES (
	SNAME,
	SDES
) VALUES (
	'Tiger',
	'Large cat with stripes'
);

-- Insert values into Reserves table
INSERT INTO RESERVES (
	RTITLE,
	SPECIESID
) VALUES (
	'Elephant Reserve',
	1
);

INSERT INTO RESERVES (
	RTITLE,
	SPECIESID
) VALUES (
	'Tiger Reserve',
	2
);

-- Insert values into Projects table
INSERT INTO PROJECTS (
	PROJECTDETAIL,
	STARTDATE,
	ESTENDDATE,
	MANAGER_ID
) VALUES (
	'Wildlife Conservation',
	DATE '2024-01-01',
	DATE '2024-12-31',
	1
);

INSERT INTO PROJECTS (
	PROJECTDETAIL,
	STARTDATE,
	ESTENDDATE,
	MANAGER_ID
) VALUES (
	'Tiger Habitat Restoration',
	DATE '2024-03-15',
	DATE '2025-03-15',
	2
);

-- Insert values into Employees table
INSERT INTO EMPLOYEES (
	NAME,
	EMAIL,
	MANAGER_ID,
	PROJECTID
) VALUES (
	'John Doe',
	'john.doe@example.com',
	1,
	1
);

INSERT INTO EMPLOYEES (
	NAME,
	EMAIL,
	MANAGER_ID,
	PROJECTID
) VALUES (
	'Jane Smith',
	'jane.smith@example.com',
	2,
	2
);

-- Insert values into Task table
INSERT INTO TASKS (
	TASK_DESC,
	ASSIGNED_TIME,
	RESERVEID
) VALUES (
	'Feed the elephants',
	DATE '2024-08-10',
	1
);

INSERT INTO TASKS (
	TASK_DESC,
	ASSIGNED_TIME,
	RESERVEID
) VALUES (
	'Monitor tiger health',
	DATE '2024-08-11',
	2
);

-- Insert values into Assignments table
INSERT INTO ASSIGNMENTS (
	EMP_ID,
	TASK_ID,
	URGENCY
) VALUES (
	1,
	1,
	2
);

INSERT INTO ASSIGNMENTS (
	EMP_ID,
	TASK_ID,
	URGENCY
) VALUES (
	2,
	2,
	3
);

-- Insert values into VisitorLogging table
INSERT INTO VISITORLOGGING (
	ENTRY_TIME
) VALUES (
	1630
);

INSERT INTO VISITORLOGGING (
	ENTRY_TIME
) VALUES (
	1415
);

-- Insert values into Complaints table
INSERT INTO COMPLAINTS (
	COMPLAINT,
	MANAGER_ID,
	EMP_ID
) VALUES (
	'Overcrowded enclosure',
	1,
	1
);

INSERT INTO COMPLAINTS (
	COMPLAINT,
	MANAGER_ID,
	EMP_ID
) VALUES (
	'Noise from visitors',
	2,
	2
);

/*
select * from LOGINDATABASE;
UPDATE LOGINDATABASE SET L_Password = 'A' WHERE email = 'alice.j@example.com';
UPDATE LOGINDATABASE SET L_Password = 'S' WHERE email = 'jane.smith@example.com';
select * from LOGINDATABASE;
/*
UPDATE LOGINDATABASE SET L_Password = 'Alice3' WHERE email = 'alice.j@example.com';

SELECT * FROM LoginDatabase WHERE email = 'alice.j@example.com';
select * from employees where MANAGER_ID = 1;
select * from PROJECTS;
select * from tasks;
select task_id, task_desc, assigned_time, reserveId, urgency from assignments
inner join employees using (emp_id) 
inner join tasks using (task_id)
WHERE MANAGER_ID = 1;
select * from projects;
*/
/*
TRUNCATE TABLE LoginDatabase;
DROP TABLE LoginDatabase;
TRUNCATE TABLE VisitorLogging;
DROP TABLE VisitorLogging;
TRUNCATE TABLE Assignments;
DROP TABLE Assignments;
TRUNCATE TABLE Tasks;
DROP TABLE Tasks;
TRUNCATE TABLE Reserves;
DROP TABLE Reserves;
TRUNCATE TABLE Species;
DROP TABLE Species;
TRUNCATE TABLE Complaints;
DROP TABLE Complaints;
TRUNCATE TABLE Employees;
DROP TABLE Employees;
TRUNCATE TABLE Projects;
DROP TABLE Projects;
TRUNCATE TABLE Managers;
DROP TABLE Managers;
*/