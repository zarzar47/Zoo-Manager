-- The database schema
CREATE TABLE Employees (
	emp_id number(10,0) GENERATED BY DEFAULT AS IDENTITY,
	name varchar2(255) NOT NULL,
	email varchar2(255) NOT NULL,
	hire_date DATE DEFAULT TO_DATE(SYSDATE, 'YYYY-MM-DD'),
	Manager_ID number(10) NOT NULL,
	Project_id number(10),
	phoneNum varchar2(255),
	PRIMARY KEY (emp_id)
);

CREATE TABLE Tasks (
	Tasks_id number(10,0) GENERATED BY DEFAULT AS IDENTITY,
	taskDesc varchar2(255) NOT NULL,
	Time date NOT NULL,
	RID number(10) NOT NULL,
	EmployeeID number(10) NOT NULL,
	Urgency number(10) DEFAULT '0',
	completed number(1) Default 0,
	PRIMARY KEY (Tasks_id)
);

CREATE TABLE Projects (
	ProjectID number(10,0) GENERATED BY DEFAULT AS IDENTITY,
	ProjectDetail varchar2(255) NOT NULL,
	StartDate date NOT NULL,
	estEndDate date NOT NULL,
	Manager_id number(10) NOT NULL,
	PRIMARY KEY (ProjectID)
);

CREATE TABLE Reserves (
	ReserveID number(10,0) GENERATED BY DEFAULT AS IDENTITY,
	RTitle varchar2(255) NOT NULL,
	SpeciesID number(10) NOT NULL,
	PRIMARY KEY (ReserveID)
);

CREATE TABLE Species (
	SpeciesID number(10,0) GENERATED BY DEFAULT AS IDENTITY,
	SName varchar2(255) NOT NULL,
	SDes varchar2(255) NOT NULL,
	PRIMARY KEY (SpeciesID)
);

CREATE TABLE Managers (
	Manager_id number(10,0) GENERATED BY DEFAULT AS IDENTITY,
	Name varchar2(255) NOT NULL,
	hire_date DATE DEFAULT TO_DATE(SYSDATE, 'YYYY-MM-DD'),
	email varchar2(255) NOT NULL,
	PRIMARY KEY (Manager_id)
);

CREATE TABLE VisitorLogging (
	visitor_no number(10,0) GENERATED BY DEFAULT AS IDENTITY,
	entry_time number(10) NOT NULL
);

CREATE TABLE Complaints (
	complaint_num int GENERATED BY DEFAULT AS IDENTITY,
	complaint varchar2(255) NOT NULL,
	manager_id number(10),
	employee_id number(10) NOT NULL,
	PRIMARY KEY (complaint_num)
);

CREATE TABLE Owners (
	email varchar2(255) NOT NULL,
	Name varchar2(255) NOT NULL,
	PRIMARY KEY (email)
);

CREATE TABLE LOGINDATABASE (
	DATA_ID NUMBER(10) NOT NULL,
	EMAIL VARCHAR2(255) NOT NULL,
	L_PASSWORD VARCHAR2(255) NOT NULL,
	STATUS CHAR(1) NOT NULL,
	CONSTRAINT LOG_IN PRIMARY KEY (EMAIL)
);

ALTER TABLE Employees ADD CONSTRAINT Employees_fk3 FOREIGN KEY (Manager_ID) REFERENCES Managers(Manager_id);
ALTER TABLE Employees ADD CONSTRAINT Employees_fk4 FOREIGN KEY (Project_id) REFERENCES Projects(ProjectID);
ALTER TABLE Tasks ADD CONSTRAINT Tasks_fk3 FOREIGN KEY (RID) REFERENCES Reserves(ReserveID);
ALTER TABLE Tasks ADD CONSTRAINT Tasks_fk4 FOREIGN KEY (EmployeeID) REFERENCES Employees(emp_id);
ALTER TABLE Projects ADD CONSTRAINT Projects_fk4 FOREIGN KEY (Manager_id) REFERENCES Managers(Manager_id);
ALTER TABLE Reserves ADD CONSTRAINT Reserves_fk2 FOREIGN KEY (SpeciesID) REFERENCES Species(SpeciesID);
ALTER TABLE Complaints ADD CONSTRAINT Complaints_fk2 FOREIGN KEY (manager_id) REFERENCES Managers(Manager_id);
ALTER TABLE Complaints ADD CONSTRAINT Complaints_fk3 FOREIGN KEY (employee_id) REFERENCES Employees(emp_id);

/
-- Procedures
CREATE OR REPLACE PROCEDURE AddProject (
	p_ProjectDetail VARCHAR2,
    p_StartDate DATE,
    p_estEndDate DATE,
    p_Manager_id NUMBER
) AS
BEGIN
    INSERT INTO Projects (ProjectDetail, StartDate, estEndDate, Manager_id)
    VALUES (p_ProjectDetail, p_StartDate, p_estEndDate, p_Manager_id);

END;
/

CREATE OR REPLACE PROCEDURE AddingTasks (
    p_Desc VARCHAR2,
    p_Time DATE,
    p_RID NUMBER,
    p_EmployeeID NUMBER,
    p_Urgency NUMBER
) AS
BEGIN
    INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency)
    VALUES (p_Desc, p_Time, p_RID, p_EmployeeID, p_Urgency);

END AddingTasks;
/

CREATE OR REPLACE PROCEDURE AddingEmployees (
    p_name VARCHAR2,
    p_email VARCHAR2,
    p_Manager_ID NUMBER,
    p_Project_id NUMBER
) AS
BEGIN
    INSERT INTO Employees (name, email, Manager_ID, Project_id)
    VALUES (p_name, p_email, p_Manager_ID, p_Project_id);

END AddingEmployees;
/

CREATE OR REPLACE PROCEDURE CompletingTasks (
    p_TaskID NUMBER
) AS
BEGIN
    -- Update the task's completion status
    UPDATE Tasks
    SET completed = 1 
    WHERE tasks_id = p_TaskID;

END CompletingTasks;
/

CREATE OR REPLACE PROCEDURE CompletingProjects (
    p_ProjectID NUMBER
) AS
BEGIN
    DELETE FROM Projects
    WHERE ProjectID = p_ProjectID;

END CompletingProjects;
/

CREATE OR REPLACE PROCEDURE FiringEmployees ( -- Change this to completely remove the tasks (or make a employee 0 to reassign them to
    p_EmployeeID NUMBER
) AS
BEGIN
    -- Reassign tasks of the fired employee to a default employee
    UPDATE Tasks
    SET EmployeeID = 1
    WHERE EmployeeID = p_EmployeeID;

    -- Remove employee from the system
    DELETE FROM Employees
    WHERE emp_id = p_EmployeeID;

END;
/

CREATE OR REPLACE PROCEDURE FiringManagers ( -- change this to reassign all employees to a default manager 0, he can be called the HEAD manager
    p_ManagerID NUMBER
) AS
BEGIN
    -- Reassign employees under the fired manager to a default manager
    UPDATE Employees
    SET Manager_ID = 1
    WHERE Manager_ID = p_ManagerID;

    -- Reassign projects under the fired manager to a default manager
    UPDATE Projects
    SET Manager_id = 1
    WHERE Manager_id = p_ManagerID;

    -- Remove manager from the system
    DELETE FROM Managers
    WHERE Manager_id = p_ManagerID;

END;
/
CREATE OR REPLACE PROCEDURE LogComplaint (
    p_complaint VARCHAR2,
    p_manager_id NUMBER,
    p_employee_id NUMBER
) AS
BEGIN
    INSERT INTO Complaints (complaint, manager_id, employee_id)
    VALUES (p_complaint, p_manager_id, p_employee_id);

END LogComplaint;
/

CREATE OR REPLACE PROCEDURE AssignEmployeeToProject (
    p_EmployeeID NUMBER,
    p_ProjectID NUMBER
) AS
BEGIN
    UPDATE Employees
    SET Project_id = p_ProjectID
    WHERE emp_id = p_EmployeeID;

END;

/

create or replace PROCEDURE removingTasks (
    p_TaskID VARCHAR2
) AS
BEGIN
    DELETE FROM Tasks WHERE tasks_id = p_TaskID;
END;
/

CREATE PROCEDURE UpdateTask(
    p_task_id NUMBER,           -- Task ID to identify the task
    p_urgency NUMBER,           -- New urgency value
    p_details VARCHAR2(255),  -- Updated task details/description
    p_reserve_no NUMBER         -- Updated reserve number
)
BEGIN
    -- Update the task with the given ID
    UPDATE Tasks
    SET
        urgency = p_urgency,          -- Update urgency
        details = p_details,          -- Update details/description
        reserve_no = p_reserve_no     -- Update reserve number
    WHERE
        tasks_id = p_task_id;               -- Target specific task by ID
END

/
-- Functions
CREATE OR REPLACE FUNCTION GetTasksForManager (manager_id IN NUMBER)
RETURN SYS_REFCURSOR
IS
    task_ref_cursor SYS_REFCURSOR;
BEGIN
    OPEN task_ref_cursor FOR
    SELECT t.TaskDesc, t.Time, t.Urgency, t.completed, t.EmployeeID
    FROM Tasks t
    JOIN Employees e ON t.EmployeeID = e.emp_id
    WHERE e.Manager_ID = manager_id;
    RETURN task_ref_cursor;
END;

/

/
-- Triggers
CREATE OR REPLACE TRIGGER LOGINDATAE AFTER
	INSERT ON EMPLOYEES FOR EACH ROW
BEGIN
	IF INSERTING THEN
		INSERT INTO LOGINDATABASE (
			DATA_ID,
			EMAIL,
			L_PASSWORD,
			STATUS
		) VALUES (
			:NEW.EMP_ID,
			:NEW.EMAIL,
			:NEW.NAME,
			'E'
		);
	END IF;
END;
/

CREATE OR REPLACE TRIGGER LOGINDATAM AFTER
	INSERT OR DELETE ON MANAGERS FOR EACH ROW
BEGIN
	IF INSERTING THEN
		INSERT INTO LOGINDATABASE (
			DATA_ID,
			EMAIL,
			L_PASSWORD,
			STATUS
		) VALUES (
			:NEW.MANAGER_ID,
			:NEW.EMAIL,
			:NEW.NAME,
			'M'
		);
	END IF;
END;
/

-- Adding database

-- Adding data
-- Manager
INSERT INTO Managers (Name, email) VALUES ('Alice Johnson', 'alice.johnson@example.com');
INSERT INTO Managers (Name, email) VALUES ('Brian Lopez', 'brian.lopez@example.com');
INSERT INTO Managers (Name, email) VALUES ('Clara Nguyen', 'clara.nguyen@example.com');

-- Project
INSERT INTO Projects (ProjectDetail, StartDate, estEndDate, Manager_id) VALUES ('Animal Habitat Restoration', DATE '2024-01-01', DATE '2024-12-31', 1);
INSERT INTO Projects (ProjectDetail, StartDate, estEndDate, Manager_id) VALUES ('Visitor Experience Optimization', DATE '2024-03-15', DATE '2025-03-15', 2);
INSERT INTO Projects (ProjectDetail, StartDate, estEndDate, Manager_id) VALUES ('Rare Species Preservation', DATE '2023-07-01', DATE '2024-06-30', 3);

--Employees
INSERT INTO Employees (name, email, Manager_ID, Project_id) VALUES ('Alexandra Cortez', 'acortez@example.com', 1, NULL);
INSERT INTO Employees (name, email, Manager_ID, Project_id) VALUES ('Benedict Faulkner', 'bfaulkner@example.com', 1, 1);
INSERT INTO Employees (name, email, Manager_ID, Project_id) VALUES ('Charlotte Klein', 'cklein@example.com', 2, NULL);
INSERT INTO Employees (name, email, Manager_ID, Project_id) VALUES ('Darnell Hayes', 'dhayes@example.com', 3, 3);
INSERT INTO Employees (name, email, Manager_ID, Project_id) VALUES ('Evangeline Brewer', 'ebrewer@example.com', 1, NULL);
INSERT INTO Employees (name, email, Manager_ID, Project_id) VALUES ('Felix Ortega', 'fortega@example.com', 2, 2);
INSERT INTO Employees (name, email, Manager_ID, Project_id) VALUES ('Giselle Vance', 'gvance@example.com', 3, NULL);
INSERT INTO Employees (name, email, Manager_ID, Project_id) VALUES ('Harvey Benson', 'hbenson@example.com', 2, 1);
INSERT INTO Employees (name, email, Manager_ID, Project_id) VALUES ('Isla Meadows', 'imeadows@example.com', 3, 2);
INSERT INTO Employees (name, email, Manager_ID, Project_id) VALUES ('Jacob Stein', 'jstein@example.com', 1, NULL);

-- Species
INSERT INTO Species (SName, SDes) VALUES ('Elephant', 'Large mammal with a trunk');
INSERT INTO Species (SName, SDes) VALUES ('Tiger', 'Large cat with stripes');
INSERT INTO Species (SName, SDes) VALUES ('Parrot', 'Colorful bird known for mimicking');
INSERT INTO Species (SName, SDes) VALUES ('Wolf', 'Wild canine with pack behavior');
INSERT INTO Species (SName, SDes) VALUES ('Penguin', 'Flightless bird from Antarctica');

-- Reserve
INSERT INTO Reserves (RTitle, SpeciesID) VALUES ('Elephant Reserve', 1);
INSERT INTO Reserves (RTitle, SpeciesID) VALUES ('Tiger Habitat', 2);
INSERT INTO Reserves (RTitle, SpeciesID) VALUES ('Rainforest Conservation Zone', 3);
INSERT INTO Reserves (RTitle, SpeciesID) VALUES ('Bird Sanctuary', 4);
INSERT INTO Reserves (RTitle, SpeciesID) VALUES ('Arctic Wolf Preserve', 5);

-- Tasks
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Inspect animal health', TO_DATE('2024-08-15', 'YYYY-MM-DD'), 1, 1, 2);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Check habitat safety', TO_DATE('2024-08-16', 'YYYY-MM-DD'), 2, 2, 3);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Monitor water levels', TO_DATE('2024-08-17', 'YYYY-MM-DD'), 3, 3, 1);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Repair enclosure fence', TO_DATE('2024-08-18', 'YYYY-MM-DD'), 2, 4, 2);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Prepare food supplies', TO_DATE('2024-08-19', 'YYYY-MM-DD'), 1, 5, 1);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Inventory check for reserves', TO_DATE('2024-08-20', 'YYYY-MM-DD'), 1, 6, 2);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Train new employees', TO_DATE('2024-08-21', 'YYYY-MM-DD'), 2, 7, 3);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Prepare habitat for new species', TO_DATE('2024-08-22', 'YYYY-MM-DD'), 3, 8, 2);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Analyze animal behavior', TO_DATE('2024-08-23', 'YYYY-MM-DD'), 1, 9, 1);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Design new enclosure', TO_DATE('2024-08-24', 'YYYY-MM-DD'), 2, 10, 2);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Assist with guest interactions', TO_DATE('2024-08-25', 'YYYY-MM-DD'), 1, 1, 3);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Update emergency protocols', TO_DATE('2024-08-26', 'YYYY-MM-DD'), 3, 4, 2);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Coordinate relocation of animals', TO_DATE('2024-08-27', 'YYYY-MM-DD'), 2, 6, 1);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Manage reserve budget reports', TO_DATE('2024-08-28', 'YYYY-MM-DD'), 3, 8, 3);
INSERT INTO Tasks (TaskDesc, Time, RID, EmployeeID, Urgency) VALUES ('Plan educational workshops', TO_DATE('2024-08-29', 'YYYY-MM-DD'), 1, 9, 2);


-- VisitorLogging
INSERT INTO VisitorLogging (entry_time) VALUES (930);
INSERT INTO VisitorLogging (entry_time) VALUES (1100);
INSERT INTO VisitorLogging (entry_time) VALUES (1430);
INSERT INTO VisitorLogging (entry_time) VALUES (1615);
INSERT INTO VisitorLogging (entry_time) VALUES (1830);

-- Complaints better to add it through the procedure

/*
 drop table VisitorLogging cascade constraints;
 drop table LOGINDATABASE cascade constraints;
 drop table Employees cascade constraints;
 drop table Tasks cascade constraints;
 drop table Projects cascade constraints;
 drop table Reserves cascade constraints;
 drop table Species cascade constraints;
 drop table Managers cascade constraints;
 drop table Complaints  cascade constraints;
 drop table Owners cascade constraints;
*/